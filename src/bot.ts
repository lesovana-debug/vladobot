import { Telegraf, Context } from 'telegraf';
import { telegramConfig } from './config';
import { logger, createChildLogger } from './logging';
import { db } from './storage';
import { sttService } from './stt';
import { summarizer } from './summarizer';
import { SchedulerService } from './scheduler';

/**
 * Bot context with additional properties
 */
interface BotContext extends Context {
  chatLogger: ReturnType<typeof createChildLogger>;
}

/**
 * Main bot class
 */
export class VladoBot {
  private bot: Telegraf<BotContext>;
  private scheduler: SchedulerService;

  constructor() {
    this.bot = new Telegraf<BotContext>(telegramConfig.token);
    this.scheduler = new SchedulerService(this.bot);
    
    this.setupMiddleware();
    this.setupCommands();
    this.setupMessageHandlers();
    this.setupErrorHandling();
  }

  /**
   * Setup middleware
   */
  private setupMiddleware(): void {
    // Logging middleware
    this.bot.use(async (ctx: any, next: any) => {
      ctx.chatLogger = createChildLogger({
        chatId: ctx.chat?.id?.toString(),
        userId: ctx.from?.id?.toString(),
        messageType: ctx.message ? Object.keys(ctx.message)[1] : 'unknown',
      });

      ctx.chatLogger.info('Message received', {
        chatType: ctx.chat?.type,
        messageId: ctx.message ? (ctx.message as any).message_id : null,
      });

      await next();
    });

    // Chat registration middleware
    this.bot.use(async (ctx: any, next: any) => {
      if (ctx.chat && ctx.from) {
        await this.registerChatAndUser(ctx);
      }
      await next();
    });
  }

  /**
   * Setup command handlers
   */
  private setupCommands(): void {
    // Start command
    this.bot.start(async (ctx: any) => {
      const helpText = `ü§ñ **VladoBot** - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã —á–∞—Ç–æ–≤

–Ø —Å–æ–∑–¥–∞—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö, –≤–∫–ª—é—á–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–æ–≤.

**–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞:**
1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –±–æ—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω Privacy Mode (—á–µ—Ä–µ–∑ @BotFather)
2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/settime 21:00 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞
/settimezone Europe/Berlin - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É
/settarget @username - –∫–æ–≥–æ —Ç–µ–≥–∞—Ç—å –≤ –æ—Ç—á–µ—Ç–∞—Ö
/preview - —Å–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/help - –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ 21:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ Berlin.`;

      await ctx.reply(helpText, { parse_mode: 'Markdown' });
    });

    // Help command
    this.bot.help(async (ctx: any) => {
      const helpText = `üìñ **–ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ VladoBot**

**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ \`/settime 21:00\` - –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç HH:MM)
‚Ä¢ \`/settimezone Europe/Berlin\` - —Ç–∞–π–º–∑–æ–Ω–∞ —á–∞—Ç–∞
‚Ä¢ \`/settarget @username\` - –∫–æ–≥–æ —Ç–µ–≥–∞—Ç—å –≤ –æ—Ç—á–µ—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é @vlad311)

**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
‚Ä¢ \`/optout\` - –∏—Å–∫–ª—é—á–∏—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–∞–º–º–∞—Ä–∏
‚Ä¢ \`/optin\` - –≤–∫–ª—é—á–∏—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∞–º–º–∞—Ä–∏

**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
‚Ä¢ \`/preview\` - —Å–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
‚Ä¢ \`/status\` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

**–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:**
‚Ä¢ –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ, –∫—Ä—É–∂–∫–∏)
‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∏ —á–µ—Ä–µ–∑ Whisper AI
‚Ä¢ –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å —Ç–µ–º–∞–º–∏, —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

**–í–∞–∂–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –±–æ—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω Privacy Mode –≤ @BotFather
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã`;

      await ctx.reply(helpText, { parse_mode: 'Markdown' });
    });

    // Set time command
    this.bot.command('settime', async (ctx: any) => {
      const args = ctx.message.text.split(' ').slice(1);
      if (args.length === 0) {
        await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM\n–ü—Ä–∏–º–µ—Ä: /settime 21:00');
        return;
      }

      const time = args[0];
      if (!SchedulerService.validateTimeFormat(time)) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM\n–ü—Ä–∏–º–µ—Ä: /settime 21:00');
        return;
      }

      if (!ctx.chat) {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö');
        return;
      }

      db.updateChatSettings(ctx.chat.id.toString(), { report_time: time });
      await this.scheduler.updateChatSchedule(ctx.chat.id.toString());

      await ctx.reply(`‚úÖ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${time}`);
    });

    // Set timezone command
    this.bot.command('settimezone', async (ctx: any) => {
      const args = ctx.message.text.split(' ').slice(1);
      if (args.length === 0) {
        const timezones = SchedulerService.getAvailableTimezones();
        await ctx.reply(`‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∞–π–º–∑–æ–Ω—É\n–î–æ—Å—Ç—É–ø–Ω—ã–µ: ${timezones.join(', ')}`);
        return;
      }

      const timezone = args[0];
      if (!SchedulerService.validateTimezone(timezone)) {
        const timezones = SchedulerService.getAvailableTimezones();
        await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${timezones.join(', ')}`);
        return;
      }

      if (!ctx.chat) {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö');
        return;
      }

      db.updateChatSettings(ctx.chat.id.toString(), { timezone });
      await this.scheduler.updateChatSchedule(ctx.chat.id.toString());

      await ctx.reply(`‚úÖ –¢–∞–π–º–∑–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${timezone}`);
    });

    // Set target command
    this.bot.command('settarget', async (ctx: any) => {
      const args = ctx.message.text.split(' ').slice(1);
      if (args.length === 0) {
        await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ username –¥–ª—è —Ç–µ–≥–∞\n–ü—Ä–∏–º–µ—Ä: /settarget @vlad311');
        return;
      }

      const target = args[0];
      if (!target.startsWith('@')) {
        await ctx.reply('‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @\n–ü—Ä–∏–º–µ—Ä: /settarget @vlad311');
        return;
      }

      if (!ctx.chat) {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö');
        return;
      }

      db.updateChatSettings(ctx.chat.id.toString(), { target_username: target });

      await ctx.reply(`‚úÖ –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${target}`);
    });

    // Opt out command
    this.bot.command('optout', async (ctx: any) => {
      if (!ctx.from) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      db.setUserOptOut(ctx.from.id.toString(), true);
      await ctx.reply('‚úÖ –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–∞–º–º–∞—Ä–∏');
    });

    // Opt in command
    this.bot.command('optin', async (ctx: any) => {
      if (!ctx.from) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      db.setUserOptOut(ctx.from.id.toString(), false);
      await ctx.reply('‚úÖ –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å–∞–º–º–∞—Ä–∏');
    });

    // Preview command
    this.bot.command('preview', async (ctx: any) => {
      if (!ctx.chat) {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö');
        return;
      }

      try {
        await ctx.reply('üîÑ –°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è...');
        
        const summary = await summarizer.generatePreviewSummary(ctx.chat.id.toString());
        
        await ctx.reply(summary, { parse_mode: 'Markdown' });
      } catch (error) {
        ctx.chatLogger.error('Failed to generate preview', {
          error: error instanceof Error ? error.message : error,
        });
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.');
      }
    });

    // Status command
    this.bot.command('status', async (ctx: any) => {
      if (!ctx.chat) {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö');
        return;
      }

      const chat = db.getChat(ctx.chat.id.toString());
      if (!chat) {
        await ctx.reply('‚ùå –ß–∞—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        return;
      }

      const status = this.scheduler.getStatus();
      const stats = await summarizer.getSummaryStats(ctx.chat.id.toString());

      const statusText = `üìä **–°—Ç–∞—Ç—É—Å VladoBot**

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞:**
‚Ä¢ –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞: ${chat.report_time}
‚Ä¢ –¢–∞–π–º–∑–æ–Ω–∞: ${chat.timezone}
‚Ä¢ –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${chat.target_username}
‚Ä¢ –°—Ç–∞—Ç—É—Å: ${chat.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (7 –¥–Ω–µ–π):**
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.totalMessages}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: ${stats.averagePerDay}
‚Ä¢ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ: ${stats.mostActiveUsers.slice(0, 3).map(u => u.username).join(', ')}

**–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${status.activeJobs}
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: ${status.scheduledChats.length}`;

      await ctx.reply(statusText, { parse_mode: 'Markdown' });
    });
  }

  /**
   * Setup message handlers
   */
  private setupMessageHandlers(): void {
    // Handle all messages
    this.bot.on('message', async (ctx: any) => {
      if (!ctx.chat || !ctx.from || !ctx.message) return;

      try {
        await this.processMessage(ctx);
      } catch (error) {
        ctx.chatLogger.error('Failed to process message', {
          error: error instanceof Error ? error.message : error,
        });
      }
    });
  }

  /**
   * Process incoming message
   */
  private async processMessage(ctx: BotContext): Promise<void> {
    const message = ctx.message as any;
    const messageId = message.message_id.toString();
    const chatId = ctx.chat!.id.toString();
    const userId = ctx.from!.id.toString();

    // Determine message type and content
    let messageType: string;
    let content: string | null = null;
    let fileId: string | null = null;

    if (message.text) {
      messageType = 'text';
      content = message.text;
    } else if (message.photo) {
      messageType = 'photo';
      content = message.caption || null;
      fileId = message.photo[message.photo.length - 1].file_id;
    } else if (message.video) {
      messageType = 'video';
      content = message.caption || null;
      fileId = message.video.file_id;
    } else if (message.voice) {
      messageType = 'voice';
      fileId = message.voice.file_id;
    } else if (message.audio) {
      messageType = 'audio';
      content = message.caption || null;
      fileId = message.audio.file_id;
    } else if (message.video_note) {
      messageType = 'video_note';
      fileId = message.video_note.file_id;
    } else if (message.sticker) {
      messageType = 'sticker';
      content = `[${message.sticker.emoji || '—Å—Ç–∏–∫–µ—Ä'}]`;
    } else if (message.document) {
      messageType = 'document';
      content = message.caption || null;
      fileId = message.document.file_id;
    } else {
      messageType = 'unknown';
    }

    // Store message in database
    db.insertMessage({
      chat_id: chatId,
      message_id: messageId,
      user_id: userId,
      message_type: messageType as any,
      content,
      file_id: fileId,
      file_path: null,
      reply_to_message_id: message.reply_to_message?.message_id?.toString() || null,
    });

    // Process audio/video for transcription
    if (sttService.isSupportedAudioType(messageType) && fileId) {
      this.processAudioMessage(ctx, fileId, messageId, messageType);
    }

    ctx.chatLogger.debug('Message processed', {
      messageType,
      hasContent: !!content,
      hasFile: !!fileId,
    });
  }

  /**
   * Process audio message for transcription
   */
  private async processAudioMessage(
    ctx: BotContext,
    fileId: string,
    messageId: string,
    messageType: string
  ): Promise<void> {
    try {
      // Download file
      const filePath = await sttService.downloadTelegramFile(fileId, telegramConfig.token);
      if (!filePath) {
        ctx.chatLogger.warn('Failed to download audio file', { fileId });
        return;
      }

      // Get duration if available
      const message = ctx.message as any;
      const duration = message[messageType]?.duration;

      // Process for transcription
      await sttService.processAudioMessage(fileId, messageId, filePath, duration);

      ctx.chatLogger.info('Audio message processed for transcription', {
        fileId,
        messageId,
        messageType,
        duration,
      });
    } catch (error) {
      ctx.chatLogger.error('Failed to process audio message', {
        fileId,
        messageId,
        error: error instanceof Error ? error.message : error,
      });
    }
  }

  /**
   * Register chat and user in database
   */
  private async registerChatAndUser(ctx: BotContext): Promise<void> {
    if (!ctx.chat || !ctx.from) return;

    const chatId = ctx.chat.id.toString();
    const userId = ctx.from.id.toString();

    // Register chat
    db.upsertChat({
      chat_id: chatId,
      title: ctx.chat.title || ctx.chat.first_name || 'Unknown Chat',
      type: ctx.chat.type as 'group' | 'supergroup' | 'channel',
      report_time: '21:00',
      timezone: 'Europe/Berlin',
      target_username: '@vlad311',
      is_active: true,
    });

    // Register user
    db.upsertUser({
      user_id: userId,
      username: ctx.from.username || null,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name || null,
      is_opted_out: false,
    });
  }

  /**
   * Setup error handling
   */
  private setupErrorHandling(): void {
    this.bot.catch((err: any, ctx: any) => {
      logger.error('Bot error', {
        error: err.message,
        stack: err.stack,
        chatId: ctx.chat?.id,
        userId: ctx.from?.id,
      });
    });

    process.on('unhandledRejection', (reason: any, promise: any) => {
      logger.error('Unhandled Rejection', { reason, promise });
    });

    process.on('uncaughtException', (error: any) => {
      logger.error('Uncaught Exception', { error: error.message, stack: error.stack });
      process.exit(1);
    });
  }

  /**
   * Start the bot
   */
  public async start(): Promise<void> {
    try {
      logger.info('Starting VladoBot...');

      // Initialize scheduler
      await this.scheduler.initialize();

      // Start bot
      await this.bot.launch();

      logger.info('VladoBot started successfully');

      // Graceful shutdown
      process.once('SIGINT', () => this.stop());
      process.once('SIGTERM', () => this.stop());
    } catch (error) {
      logger.error('Failed to start bot', {
        error: error instanceof Error ? error.message : error,
      });
      throw error;
    }
  }

  /**
   * Stop the bot
   */
  public async stop(): Promise<void> {
    logger.info('Stopping VladoBot...');
    
    this.scheduler.stopAll();
    this.bot.stop('SIGINT');
    
    logger.info('VladoBot stopped');
  }
}

// Export bot instance
export const bot = new VladoBot();
